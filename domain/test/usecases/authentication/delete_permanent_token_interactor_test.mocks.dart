// Mocks generated by Mockito 5.0.17 from annotations
// in domain/test/usecases/authentication/delete_permanent_token_interactor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeToken_0 extends _i1.Fake implements _i2.Token {}

class _FakeUser_1 extends _i1.Fake implements _i2.User {}

class _FakeUri_2 extends _i1.Fake implements Uri {}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i2.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Token> createPermanentToken(
          Uri? baseUrl,
          _i2.APIVersionSupported? apiVersion,
          _i2.UserName? userName,
          _i2.Password? password,
          {_i2.OTPCode? otpCode}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createPermanentToken,
                  [baseUrl, apiVersion, userName, password],
                  {#otpCode: otpCode}),
              returnValue: Future<_i2.Token>.value(_FakeToken_0()))
          as _i3.Future<_i2.Token>);
  @override
  _i3.Future<bool> deletePermanentToken(_i2.Token? token) =>
      (super.noSuchMethod(Invocation.method(#deletePermanentToken, [token]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i2.User> getAuthorizedUser() =>
      (super.noSuchMethod(Invocation.method(#getAuthorizedUser, []),
              returnValue: Future<_i2.User>.value(_FakeUser_1()))
          as _i3.Future<_i2.User>);
  @override
  _i3.Future<dynamic> saveAuthorizedUser(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#saveAuthorizedUser, [user]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<_i2.User> getAuthorizedUserOffline() =>
      (super.noSuchMethod(Invocation.method(#getAuthorizedUserOffline, []),
              returnValue: Future<_i2.User>.value(_FakeUser_1()))
          as _i3.Future<_i2.User>);
}

/// A class which mocks [TokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenRepository extends _i1.Mock implements _i2.TokenRepository {
  MockTokenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> persistToken(_i2.Token? token) =>
      (super.noSuchMethod(Invocation.method(#persistToken, [token]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> removeToken() =>
      (super.noSuchMethod(Invocation.method(#removeToken, []),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<_i2.Token> getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []),
              returnValue: Future<_i2.Token>.value(_FakeToken_0()))
          as _i3.Future<_i2.Token>);
}

/// A class which mocks [CredentialRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentialRepository extends _i1.Mock
    implements _i2.CredentialRepository {
  MockCredentialRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> saveBaseUrl(Uri? baseUrl) =>
      (super.noSuchMethod(Invocation.method(#saveBaseUrl, [baseUrl]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> removeBaseUrl() =>
      (super.noSuchMethod(Invocation.method(#removeBaseUrl, []),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<Uri> getBaseUrl() =>
      (super.noSuchMethod(Invocation.method(#getBaseUrl, []),
          returnValue: Future<Uri>.value(_FakeUri_2())) as _i3.Future<Uri>);
}
