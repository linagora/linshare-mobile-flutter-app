// Mocks generated by Mockito 5.0.17 from annotations
// in domain/test/usecases/quota/get_quota_interactor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAccountQuota_0 extends _i1.Fake implements _i2.AccountQuota {}

/// A class which mocks [QuotaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuotaRepository extends _i1.Mock implements _i2.QuotaRepository {
  MockQuotaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.AccountQuota> findQuota(_i2.QuotaId? quotaUuid) =>
      (super.noSuchMethod(Invocation.method(#findQuota, [quotaUuid]),
              returnValue:
                  Future<_i2.AccountQuota>.value(_FakeAccountQuota_0()))
          as _i3.Future<_i2.AccountQuota>);
  @override
  _i3.Future<dynamic> saveQuota(_i2.AccountQuota? accountQuota) =>
      (super.noSuchMethod(Invocation.method(#saveQuota, [accountQuota]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<_i2.AccountQuota> getQuotaOffline() => (super.noSuchMethod(
          Invocation.method(#getQuotaOffline, []),
          returnValue: Future<_i2.AccountQuota>.value(_FakeAccountQuota_0()))
      as _i3.Future<_i2.AccountQuota>);
}
