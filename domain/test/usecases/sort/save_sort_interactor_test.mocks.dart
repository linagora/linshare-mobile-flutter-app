// Mocks generated by Mockito 5.0.17 from annotations
// in domain/test/usecases/sort/save_sort_interactor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSorter_0 extends _i1.Fake implements _i2.Sorter {}

/// A class which mocks [SortRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortRepository extends _i1.Mock implements _i2.SortRepository {
  MockSortRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Sorter> getSorter(_i2.OrderScreen? orderScreen) =>
      (super.noSuchMethod(Invocation.method(#getSorter, [orderScreen]),
              returnValue: Future<_i2.Sorter>.value(_FakeSorter_0()))
          as _i3.Future<_i2.Sorter>);
  @override
  _i3.Future<_i2.Sorter> saveSorter(_i2.Sorter? sorter) =>
      (super.noSuchMethod(Invocation.method(#saveSorter, [sorter]),
              returnValue: Future<_i2.Sorter>.value(_FakeSorter_0()))
          as _i3.Future<_i2.Sorter>);
  @override
  _i3.Future<List<T>> sortFiles<T>(List<T>? listFiles, _i2.Sorter? sorter) =>
      (super.noSuchMethod(Invocation.method(#sortFiles, [listFiles, sorter]),
          returnValue: Future<List<T>>.value(<T>[])) as _i3.Future<List<T>>);
}
