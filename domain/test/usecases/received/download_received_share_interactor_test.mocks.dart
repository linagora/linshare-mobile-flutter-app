// Mocks generated by Mockito 5.0.17 from annotations
// in domain/test/usecases/received/download_received_share_interactor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:dio/dio.dart' as _i4;
import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeReceivedShare_0 extends _i1.Fake implements _i2.ReceivedShare {}

class _FakeToken_1 extends _i1.Fake implements _i2.Token {}

class _FakeUri_2 extends _i1.Fake implements Uri {}

/// A class which mocks [ReceivedShareRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockReceivedShareRepository extends _i1.Mock
    implements _i2.ReceivedShareRepository {
  MockReceivedShareRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.ReceivedShare>> getAllReceivedShares() =>
      (super.noSuchMethod(Invocation.method(#getAllReceivedShares, []),
              returnValue:
                  Future<List<_i2.ReceivedShare>>.value(<_i2.ReceivedShare>[]))
          as _i3.Future<List<_i2.ReceivedShare>>);
  @override
  _i3.Future<List<_i2.DownloadTaskId>> downloadReceivedShares(
          List<_i2.ShareId>? shareIds,
          _i2.Token? token,
          Uri? baseUrl,
          _i2.APIVersionSupported? apiVersionSupported) =>
      (super.noSuchMethod(
          Invocation.method(#downloadReceivedShares,
              [shareIds, token, baseUrl, apiVersionSupported]),
          returnValue: Future<List<_i2.DownloadTaskId>>.value(
              <_i2.DownloadTaskId>[])) as _i3.Future<List<_i2.DownloadTaskId>>);
  @override
  _i3.Future<String> downloadPreviewReceivedShare(
          _i2.ReceivedShare? receivedShare,
          _i2.DownloadPreviewType? downloadPreviewType,
          _i2.Token? permanentToken,
          Uri? baseUrl,
          _i4.CancelToken? cancelToken) =>
      (super.noSuchMethod(
          Invocation.method(#downloadPreviewReceivedShare, [
            receivedShare,
            downloadPreviewType,
            permanentToken,
            baseUrl,
            cancelToken
          ]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<_i2.ReceivedShare> getReceivedShare(_i2.ShareId? shareId) =>
      (super.noSuchMethod(Invocation.method(#getReceivedShare, [shareId]),
              returnValue:
                  Future<_i2.ReceivedShare>.value(_FakeReceivedShare_0()))
          as _i3.Future<_i2.ReceivedShare>);
  @override
  _i3.Future<_i2.ReceivedShare> remove(_i2.ShareId? shareId) =>
      (super.noSuchMethod(Invocation.method(#remove, [shareId]),
              returnValue:
                  Future<_i2.ReceivedShare>.value(_FakeReceivedShare_0()))
          as _i3.Future<_i2.ReceivedShare>);
  @override
  _i3.Future<String> exportReceivedShare(
          _i2.ReceivedShare? receivedShare,
          _i2.Token? permanentToken,
          Uri? baseUrl,
          _i4.CancelToken? cancelToken) =>
      (super.noSuchMethod(
          Invocation.method(#exportReceivedShare,
              [receivedShare, permanentToken, baseUrl, cancelToken]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<bool> makeAvailableOffline(
          _i2.ReceivedShare? receivedShare, String? localPath) =>
      (super.noSuchMethod(
          Invocation.method(#makeAvailableOffline, [receivedShare, localPath]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<String> downloadToMakeOffline(
          _i2.ShareId? shareId,
          String? name,
          _i2.DownloadPreviewType? downloadPreviewType,
          _i2.Token? permanentToken,
          Uri? baseUrl) =>
      (super.noSuchMethod(
          Invocation.method(#downloadToMakeOffline,
              [shareId, name, downloadPreviewType, permanentToken, baseUrl]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<_i2.ReceivedShare?> getReceivedShareOffline(
          _i2.ShareId? shareId) =>
      (super.noSuchMethod(
              Invocation.method(#getReceivedShareOffline, [shareId]),
              returnValue: Future<_i2.ReceivedShare?>.value())
          as _i3.Future<_i2.ReceivedShare?>);
  @override
  _i3.Future<List<_i2.ReceivedShare>> getAllReceivedShareOffline() =>
      (super.noSuchMethod(Invocation.method(#getAllReceivedShareOffline, []),
              returnValue:
                  Future<List<_i2.ReceivedShare>>.value(<_i2.ReceivedShare>[]))
          as _i3.Future<List<_i2.ReceivedShare>>);
  @override
  _i3.Future<bool> disableOffline(_i2.ShareId? shareId, String? localPath) =>
      (super.noSuchMethod(
          Invocation.method(#disableOffline, [shareId, localPath]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}

/// A class which mocks [TokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenRepository extends _i1.Mock implements _i2.TokenRepository {
  MockTokenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> persistToken(_i2.Token? token) =>
      (super.noSuchMethod(Invocation.method(#persistToken, [token]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> removeToken() =>
      (super.noSuchMethod(Invocation.method(#removeToken, []),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<_i2.Token> getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []),
              returnValue: Future<_i2.Token>.value(_FakeToken_1()))
          as _i3.Future<_i2.Token>);
}

/// A class which mocks [CredentialRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentialRepository extends _i1.Mock
    implements _i2.CredentialRepository {
  MockCredentialRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> saveBaseUrl(Uri? baseUrl) =>
      (super.noSuchMethod(Invocation.method(#saveBaseUrl, [baseUrl]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> removeBaseUrl() =>
      (super.noSuchMethod(Invocation.method(#removeBaseUrl, []),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<Uri> getBaseUrl() =>
      (super.noSuchMethod(Invocation.method(#getBaseUrl, []),
          returnValue: Future<Uri>.value(_FakeUri_2())) as _i3.Future<Uri>);
}

/// A class which mocks [APIRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPIRepository extends _i1.Mock implements _i2.APIRepository {
  MockAPIRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> persistAPIVersionSupported(
          _i2.APIVersionSupported? apiVersionSupported) =>
      (super.noSuchMethod(
          Invocation.method(#persistAPIVersionSupported, [apiVersionSupported]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i2.APIVersionSupported> getAPIVersionSupported() =>
      (super.noSuchMethod(Invocation.method(#getAPIVersionSupported, []),
              returnValue: Future<_i2.APIVersionSupported>.value(
                  _i2.APIVersionSupported.v5))
          as _i3.Future<_i2.APIVersionSupported>);
}
