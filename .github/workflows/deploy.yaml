on:
  push:
    branches:
      - "release"
    tags:
      - "v*.*.*"

name: Deploy on stores

jobs:
  test-deploy-app:
    name: Test and deploy app
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    environment: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: "release"
          fetch-depth: 0

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true
          cache-key: deps-${{ hashFiles('pubspec.lock') }} # optional, change this to force refresh cache
          cache-path: ${{ runner.tool_cache }}/flutter # optional, change this to specify the cache path

      - name: Setup Android environment
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          PLAY_STORE_UPLOAD_KEY_BASE64: ${{ secrets.PLAY_STORE_UPLOAD_KEY_BASE64 }}
          PLAY_STORE_KEY_INFO_BASE64: ${{ secrets.PLAY_STORE_KEY_INFO_BASE64 }}
        run: |
          echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY_BASE64" | base64 --decode --output app/keystore.jks
          echo "$PLAY_STORE_KEY_INFO_BASE64" | base64 --decode --output key.properties
        working-directory: android

      - name: Setup iOS environment
        env:
          GOOGLE_SERVICES_PLIST: ${{ secrets.GOOGLE_SERVICES_PLIST }}
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}
          SHAREEXT_PROVISION_PROFILE_BASE64: ${{ secrets.SHAREEXT_PROVISION_PROFILE_BASE64 }}
        run: |
          echo -n "$GOOGLE_SERVICES_PLIST" > Runner/GoogleService-Info.plist
          echo -n "$CERTIFICATE_BASE64" | base64 --decode --output cert.p12
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output buildpp.mobileprovision
          echo -n "$SHAREEXT_PROVISION_PROFILE_BASE64" | base64 --decode --output shareextpp.mobileprovision
        working-directory: ios

      - name: Setup Fastlane (Android)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "ruby"
          bundler-cache: true
          working-directory: android

      - name: Setup Fastlane (iOS)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "ruby"
          bundler-cache: true
          working-directory: ios

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Setup cache for build_runner
        uses: actions/cache@v3
        with:
          key: build_runner_${{ hashFiles('data/**/*.dart', 'domain/**/*.dart') }}
          path: |
            data/.dart_tool
            domain/.dart_tool
          restore-keys: |
            build_runner_

      - name: Setup additional softwares
        run: brew install parallel

      - name: Run prebuild
        run: bash prebuild.sh

      - name: Analyze
        run: |
          flutter analyze --no-fatal-warnings --no-fatal-infos

      - name: Test
        run: |
          flutter test --reporter json > test-results-general.json
          flutter test data --reporter json > test-results-data.json
          flutter test domain --reporter json > test-results-domain.json

      - name: Upload test reports
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: Flutter Tests Results
          path: "test-results-*.json"
          reporter: "flutter-json"

      - name: Build and deploy
        env:
          CAPTCHA_TOKEN: ${{ secrets.CAPTCHA_TOKEN }}
          SAAS_AVAILABLE: "true"
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAY_STORE_CONFIG_JSON }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
        run: |
          parallel 'cd {} && bundle exec fastlane release' ::: android ios
