// Mocks generated by Mockito 5.0.17 from annotations
// in data/test/local_shared_space_datasource_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:data/data.dart' as _i2;
import 'package:domain/domain.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [SharedSpaceDocumentDatabaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedSpaceDocumentDatabaseManager extends _i1.Mock
    implements _i2.SharedSpaceDocumentDatabaseManager {
  MockSharedSpaceDocumentDatabaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> deleteData(String? id, String? localPath) =>
      (super.noSuchMethod(Invocation.method(#deleteData, [id, localPath]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.WorkGroupDocument?> getData(String? id) =>
      (super.noSuchMethod(Invocation.method(#getData, [id]),
              returnValue: Future<_i4.WorkGroupDocument?>.value())
          as _i3.Future<_i4.WorkGroupDocument?>);
  @override
  _i3.Future<List<_i4.WorkGroupDocument>> getListData() =>
      (super.noSuchMethod(Invocation.method(#getListData, []),
              returnValue: Future<List<_i4.WorkGroupDocument>>.value(
                  <_i4.WorkGroupDocument>[]))
          as _i3.Future<List<_i4.WorkGroupDocument>>);
  @override
  _i3.Future<bool> insertData(
          _i4.WorkGroupDocument? newObject, String? localPath) =>
      (super.noSuchMethod(
          Invocation.method(#insertData, [newObject, localPath]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> updateData(
          _i4.WorkGroupDocument? newObject, String? localPath) =>
      (super.noSuchMethod(
          Invocation.method(#updateData, [newObject, localPath]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> deleteAllData() =>
      (super.noSuchMethod(Invocation.method(#deleteAllData, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> insertSharedSpace(
          _i4.SharedSpaceNodeNested? sharedSpaceNodeNested) =>
      (super.noSuchMethod(
          Invocation.method(#insertSharedSpace, [sharedSpaceNodeNested]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<dynamic> insertListTreeNode(
          _i4.SharedSpaceId? sharedSpaceId, List<_i4.TreeNode>? treeNodes) =>
      (super.noSuchMethod(
          Invocation.method(#insertListTreeNode, [sharedSpaceId, treeNodes]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<bool> deleteSharedSpace(_i4.SharedSpaceId? sharedSpaceId) => (super
      .noSuchMethod(Invocation.method(#deleteSharedSpace, [sharedSpaceId]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i2.WorkGroupNodeCache>> getListWorkGroupCacheBySharedSpaceID(
          _i4.SharedSpaceId? sharedSpaceId) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getListWorkGroupCacheBySharedSpaceID, [sharedSpaceId]),
              returnValue: Future<List<_i2.WorkGroupNodeCache>>.value(
                  <_i2.WorkGroupNodeCache>[]))
          as _i3.Future<List<_i2.WorkGroupNodeCache>>);
  @override
  _i3.Future<bool> deleteWorkGroupNode(_i4.WorkGroupNodeId? parentNodeId) =>
      (super.noSuchMethod(
          Invocation.method(#deleteWorkGroupNode, [parentNodeId]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i4.WorkGroupNode>> getAllSharedSpaceDocumentOffline(
          _i4.SharedSpaceId? sharedSpaceId,
          _i4.WorkGroupNodeId? parentNodeId) =>
      (super.noSuchMethod(
          Invocation.method(
              #getAllSharedSpaceDocumentOffline, [sharedSpaceId, parentNodeId]),
          returnValue: Future<List<_i4.WorkGroupNode>>.value(
              <_i4.WorkGroupNode>[])) as _i3.Future<List<_i4.WorkGroupNode>>);
  @override
  _i3.Future<List<_i2.SharedSpaceCache>> getListSharedSpace() =>
      (super.noSuchMethod(Invocation.method(#getListSharedSpace, []),
              returnValue: Future<List<_i2.SharedSpaceCache>>.value(
                  <_i2.SharedSpaceCache>[]))
          as _i3.Future<List<_i2.SharedSpaceCache>>);
  @override
  _i3.Future<List<_i2.SharedSpaceCache>> getAllWorkgroupsInsideSharedSpaceNode(
          _i4.SharedSpaceId? parentId) =>
      (super.noSuchMethod(
          Invocation.method(#getAllWorkgroupsInsideSharedSpaceNode, [parentId]),
          returnValue: Future<List<_i2.SharedSpaceCache>>.value(
              <_i2.SharedSpaceCache>[])) as _i3
          .Future<List<_i2.SharedSpaceCache>>);
  @override
  _i3.Future<bool> insertDrive(_i4.SharedSpaceNodeNested? drive) =>
      (super.noSuchMethod(Invocation.method(#insertDrive, [drive]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> deleteDrive(_i4.SharedSpaceId? sharedSpaceId) =>
      (super.noSuchMethod(Invocation.method(#deleteDrive, [sharedSpaceId]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
